#!/bin/bash
# Copyright (c) 2013-2014 Apple Inc. All rights reserved.
#
# btmmdiagnose
#
# Collect BTMM information
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin

PRIV=""
if [ ${EUID} -ne 0 ]; then
    PRIV="sudo"
    $PRIV echo > /dev/null
fi

OUT="btmmdiagnose-`date +'%m.%d.%Y.%H%M%S'`"
OUTDIR="/var/tmp"
if [ -d ~/Desktop ]; then
    OUTDIR=~/Desktop
elif [ "`readlink /tmp`" = "private/var/tmp" ]; then
    OUTDIR=/Library/Logs/CrashReporter
    mkdir -p ${OUTDIR}
fi

umask 077

WORKDIR=`mktemp -d -q "/tmp/${OUT}"`
if [ $? -ne 0 ]; then
    echo "Could not create temporary directory"
    exit 1
fi

GZ_EXT=""
GZ_OPT=""
if [ -x /usr/bin/gzip ]; then
    GZ_EXT=".gz"
    GZ_OPT="-z"
fi

ARCHIVE=`mktemp -q "${OUTDIR}/${OUT}.tar${GZ_EXT}"`
if [ $? -ne 0 ]; then
    echo "Could not create archive"
    rm -rf "${WORKDIR}"
    exit 1
fi

cd "${WORKDIR}"

echo ""
echo "Please wait, collecting information"

#
# awacsd info (to system log)
#
if [ -x /usr/libexec/awacsd -a -x /usr/bin/killall ]; then
    ${PRIV} killall -INFO awacsd 2>/dev/null

    # and wait a short amount of time for awacsd
    # to actually log the requested information
    sleep 2
fi

#
# system log
#
if [ -x /usr/bin/syslog ]; then
    ${PRIV} syslog -k Sender awacsd -k Time ge -1m > syslog
elif [ -f /var/log/system.log ]; then
    ${PRIV} tail -n 1000 /var/log/system.log > system.log
fi

#
# BTMM configuration
#

BTMM_CLEANUP()
{
    rm -f .btmmfifo .btmminfo .digsync
}

BTMM_SETUP()
{
    BTMM_CLEANUP
    mkfifo .btmmfifo

    BTMMPORT=40000
    while nc -6z ::1 "${PORT}" > /dev/null 2>&1
    do
        BTMMPORT=$((PORT + 1))
    done
}

BTMM_CHECKMACDOTCOM()
{
    TAIL=`echo "${1}" | cut -d. -f2-`
    if [ "${TAIL}" = "members.mac.com" ]; then
        return 0
    fi

    return 1
}

# get DNS info
# params: QUERYNAME QUERYTYPE
BTMM_DIG()
{
    rm -f .digsync

    nc -6 -l "${BTMMPORT}" < .btmmfifo \
    | openssl s_client -connect "${HOSTPORT}" -quiet > .btmmfifo 2>.digsync &

    N_RETRY=0
    while [ $N_RETRY -lt 50 -a ! -s .digsync ]
    do
        N_RETRY=$((N_RETRY + 1))
        sleep 0.1
    done

    dig @::1 -p "${BTMMPORT}" \
        -y "${TSIG}"\
        +short \
        +tcp \
        "${1}" "${2}" 2>/dev/null

    wait %1
}

# get the unique identifier used to lookup the keychain item for a zone
# params: ZONE
BTMM_UNIQUEIDFROMZONE()
{
    BTMM_CHECKMACDOTCOM "${1}"
    if [ $? -eq 0 ]; then
        echo "dns:${1}"
    else
        echo "btmmdns:${1}"
    fi
}

# get hostname, port, TSIG name and TSIG data from keychain
# params: UNIQUEID
BTMM_GETINFO()
{
    ${PRIV} security find-generic-password \
        -s "${1}" \
        /Library/Keychains/System.keychain > .btmminfo 2>/dev/null
    ${PRIV} security find-generic-password \
        -s "${1}" \
        -w /Library/Keychains/System.keychain 2>/dev/null
}

# params: ZONE
BTMM_URLISH()
{
    BTMM_CHECKMACDOTCOM "${1}"
    if [ $? -eq 0 ]; then
        echo "pm-members.mac.com.:443"
    else
        cat .btmminfo | sed -n 's/.*0x00000007 <blob>=\"\(.*\)\"/\1/p'
    fi
}

BTMM_RELAYINFO()
{
    BTMM_CHECKMACDOTCOM "${1}"
    if [ $? -eq 0 ]; then
        return
    fi

    SECRET=`BTMM_GETINFO "btmmrelay:${1}"`

    if [ -z "${SECRET}" ]; then
        echo "  No Relay keychain item." >> btmm
        return
    fi

    if [ `echo "${SECRET}" | wc -l` -ne 1 ]; then
        echo "  More than one Relay keychain item." >> btmm
        return
    fi

    URLISH=`BTMM_URLISH "${DOMAIN}"`
    ACCOUNT=`cat .btmminfo | sed -n 's/.*\"acct\"<blob>=\"\(.*\)\"/\1/p'`
    KEYHASH="`perl -M'Digest::SHA1 qw(sha1_hex)' -l -e '
            printf "[SHA1:%s]\n", sha1_hex($ARGV[0] . "\n");
    ' ${SECRET}`"
    echo "  RHP: ${URLISH}"  >> btmm
    echo "  RAC: ${ACCOUNT}" >> btmm
    echo "  RKY: ${KEYHASH}" >> btmm
}

BTMM_REPORTZONE()
{
    DOMAIN="${1}"

    echo             >> btmm
    echo "${DOMAIN}" >> btmm

    DNSID=`BTMM_UNIQUEIDFROMZONE "${DOMAIN}"`
    SECRET=`BTMM_GETINFO "${DNSID}"`

    if [ -z "${SECRET}" ]; then
        echo "  No DNS keychain item." >> btmm
        return
    fi

    if [ `echo "${SECRET}" | wc -l` -ne 1 ]; then
        echo "  More than one DNS keychain item." >> btmm
        return
    fi

    URLISH=`BTMM_URLISH "${DOMAIN}"`
    HOSTPORT=`echo "${URLISH}" | cut -d@ -f2`
    ACCOUNT=`cat .btmminfo | sed -n 's/.*\"acct\"<blob>=\"\(.*\)\"/\1/p'`
    TSIG="${ACCOUNT}:${SECRET}"

    KEYHASH="`perl -M'Digest::SHA1 qw(sha1_hex)' -l -e '
            printf "[SHA1:%s]\n", sha1_hex($ARGV[0] . "\n");
        ' ${SECRET}`"
    echo ""                  >> btmm
    echo "  DHP: ${URLISH}"  >> btmm
    echo "  DAC: ${ACCOUNT}" >> btmm
    echo "  DKY: ${KEYHASH}" >> btmm

    BTMM_RELAYINFO "${DOMAIN}"

    REACHHOST=`echo "${HOSTPORT}" | cut -d: -f1`
    STATUSES=`scutil -r "${REACHHOST}"`
    for REACHSTATUS in `echo ${STATUSES} | tr -d ' ' | tr ',' ' '`; do
        if [ "$REACHSTATUS" == "NotReachable" ] \
            || [ "$REACHSTATUS" == "ConnectionRequired" ]; then
            echo "  Skipping DNS queries, no connectivity" >> btmm
            return
        fi
    done

    for TYPE in          \
        _afpovertcp._tcp \
        _airport._tcp    \
        _adisk._tcp      \
        _http._tcp       \
        _rfb._tcp        \
        _smb._tcp        \
        _ssh._tcp
    do
        BTMM_DIG "${TYPE}.${DOMAIN}" ptr \
        | while read -r REG
        do
            echo ""              >> btmm
            /bin/echo "  ${REG}" >> btmm
            echo ""              >> btmm

            INF_Q=`/bin/echo "${REG}" | sed -e "s/${TYPE}/_device-info._tcp/"`
            INF=`BTMM_DIG "${INF_Q}" txt`
            echo "    INF: ${INF}" >> btmm

            SRV=`BTMM_DIG ${REG} srv`
            SRV1=`/bin/echo "${SRV}" | head -1`
            echo "    SRV: ${SRV1}" >> btmm
            SRV2=`/bin/echo "${SRV}" | tail +2`
            if [ -n "${SRV2}" ]; then
                SRV="${SRV1}"
                /bin/echo "${SRV2}" \
                | sed -e 's/^/  *****: /' >> btmm
            fi

            TXT=`BTMM_DIG ${REG} txt`
            TXT1=`/bin/echo "${TXT}" | head -1`
            echo "    TXT: ${TXT1}" >> btmm
            TXT2=`/bin/echo "${TXT}" | tail +2`
            if [ -n "${TXT2}" ]; then
                /bin/echo "${TXT2}" \
                | sed -e 's/^/  *****: /' >> btmm
            fi

            HOST=`/bin/echo "${SRV}" | cut -d ' ' -f 4-`
            if [ -n "${HOST}" ]; then
                V4=`BTMM_DIG ${HOST} a`
                V6=`BTMM_DIG ${HOST} aaaa`
                KRB=`BTMM_DIG _kerberos.${HOST} txt`
                TUN=`BTMM_DIG _autotunnel._udp.${HOST} srv`
                AT6=`BTMM_DIG _autotunnel6.${HOST} aaaa`
            else
                V4=""
                V6=""
                KRB=""
                TUN=""
                AT6=""
            fi
            if [ -n "${V4}" ]; then
                echo "     v4: ${V4}" >> btmm
            fi
            if [ -n "${V6}" ]; then
                echo "     v6: ${V6}" >> btmm
            fi
            if [ -n "${KRB}" ]; then
                echo "    KRB: ${KRB}" >> btmm
            fi
            if [ -n "${TUN}" ]; then
                echo "    TUN: ${TUN}" >> btmm

                HOST=`/bin/echo "${TUN}" | cut -d ' ' -f 4-`
                if [ -n "${HOST}" ]; then
                    V4=`BTMM_DIG ${HOST} a`
                    V6=`BTMM_DIG ${HOST} aaaa`
                fi
                if [ -n "${V4}" ]; then
                    echo "     v4: ${V4}" >> btmm
                fi
                if [ -n "${V6}" ]; then
                    echo "     v6: ${V6}" >> btmm
                fi
            fi
            if [ -n "${AT6}" ]; then
                echo "    AT6: ${AT6}" >> btmm
            fi
        done
    done
}

BTMM_SETUP

scutil <<_END_OF_INPUT \
| sed -n 's@.* : *\(.*\)$@\1@p' \
| sort \
| while read DOMAIN
open
show Setup:/Network/BackToMyMac
quit
_END_OF_INPUT
do
    BTMM_REPORTZONE "$DOMAIN"
done

BTMM_CLEANUP

if [ -x /System/Library/Frameworks/SystemConfiguration.framework/Resources/get-mobility-info ]; then
    /System/Library/Frameworks/SystemConfiguration.framework/Resources/get-mobility-info
else
    echo "Can't run get-mobility-info"
    echo
fi

#
# collect everything into a single archive
#
cd "${WORKDIR}/.."
if [ -x /usr/bin/tar ]; then
    tar -c ${GZ_OPT} -f "${ARCHIVE}" "${OUT}"
else
    pax -w ${GZ_OPT} -f "${ARCHIVE}" "${OUT}"
fi
rm -rf "${WORKDIR}"

if [ ${UID} -eq 0 ]; then
    if [ -n "${SUDO_UID}" -a -n "${SUDO_GID}" ]; then
        if [ ${UID} -ne ${SUDO_UID} ]; then
            chown ${SUDO_UID}:${SUDO_GID} "${ARCHIVE}"
        fi
    fi
fi

echo "BTMM data collected to \"${ARCHIVE}\""
